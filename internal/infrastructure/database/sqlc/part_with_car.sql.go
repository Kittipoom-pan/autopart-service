// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: part_with_car.sql

package db

import (
	"context"
	"database/sql"
)

const getPartWithCompatibilityByID = `-- name: GetPartWithCompatibilityByID :one
SELECT p.part_id, p.sku, p.name AS part_name, p.description, p.price, p.quantity,
       cm.car_model_id, cm.name AS car_model_name, cm.year_from, cm.year_to,
       cb.car_brand_id, cb.name AS car_brand_name
FROM part p
JOIN compatible_car cc ON p.part_id = cc.part_id
JOIN car_model cm ON cc.car_model_id = cm.car_model_id
JOIN car_brand cb ON cm.car_brand_id = cb.car_brand_id
WHERE p.part_id = ?
`

type GetPartWithCompatibilityByIDRow struct {
	PartID       int32
	Sku          string
	PartName     string
	Description  sql.NullString
	Price        sql.NullInt32
	Quantity     sql.NullInt32
	CarModelID   int32
	CarModelName string
	YearFrom     sql.NullInt16
	YearTo       sql.NullInt16
	CarBrandID   int32
	CarBrandName string
}

func (q *Queries) GetPartWithCompatibilityByID(ctx context.Context, partID int32) (GetPartWithCompatibilityByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getPartWithCompatibilityByID, partID)
	var i GetPartWithCompatibilityByIDRow
	err := row.Scan(
		&i.PartID,
		&i.Sku,
		&i.PartName,
		&i.Description,
		&i.Price,
		&i.Quantity,
		&i.CarModelID,
		&i.CarModelName,
		&i.YearFrom,
		&i.YearTo,
		&i.CarBrandID,
		&i.CarBrandName,
	)
	return i, err
}

const searchPartsByCar = `-- name: SearchPartsByCar :many
SELECT DISTINCT p.part_id, p.sku, p.name AS part_name, p.description, p.price, p.quantity,
       cb.name AS car_brand_name, cm.name AS car_model_name
FROM part p
JOIN compatible_car cc ON p.part_id = cc.part_id
JOIN car_model cm ON cc.car_model_id = cm.car_model_id
JOIN car_brand cb ON cm.car_brand_id = cb.car_brand_id
WHERE cb.name LIKE CONCAT('%', ?, '%')
  AND cm.name LIKE CONCAT('%', ?, '%')
  AND (? IS NULL OR cm.year_from <= ?)
  AND (? IS NULL OR cm.year_to >= ?)
ORDER BY p.name
`

type SearchPartsByCarParams struct {
	CONCAT   interface{}
	CONCAT_2 interface{}
	Column3  interface{}
	YearFrom sql.NullInt16
	Column5  interface{}
	YearTo   sql.NullInt16
}

type SearchPartsByCarRow struct {
	PartID       int32
	Sku          string
	PartName     string
	Description  sql.NullString
	Price        sql.NullInt32
	Quantity     sql.NullInt32
	CarBrandName string
	CarModelName string
}

func (q *Queries) SearchPartsByCar(ctx context.Context, arg SearchPartsByCarParams) ([]SearchPartsByCarRow, error) {
	rows, err := q.db.QueryContext(ctx, searchPartsByCar,
		arg.CONCAT,
		arg.CONCAT_2,
		arg.Column3,
		arg.YearFrom,
		arg.Column5,
		arg.YearTo,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchPartsByCarRow
	for rows.Next() {
		var i SearchPartsByCarRow
		if err := rows.Scan(
			&i.PartID,
			&i.Sku,
			&i.PartName,
			&i.Description,
			&i.Price,
			&i.Quantity,
			&i.CarBrandName,
			&i.CarModelName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
