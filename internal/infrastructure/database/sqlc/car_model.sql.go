// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: car_model.sql

package db

import (
	"context"
	"database/sql"
)

const createCarModel = `-- name: CreateCarModel :execresult
INSERT INTO car_model (car_brand_id, name, year_from, year_to)
VALUES (?, ?, ?, ?)
`

type CreateCarModelParams struct {
	CarBrandID int32
	Name       string
	YearFrom   sql.NullInt16
	YearTo     sql.NullInt16
}

func (q *Queries) CreateCarModel(ctx context.Context, arg CreateCarModelParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createCarModel,
		arg.CarBrandID,
		arg.Name,
		arg.YearFrom,
		arg.YearTo,
	)
}

const deleteCarModel = `-- name: DeleteCarModel :execresult
DELETE FROM car_model WHERE car_model_id = ?
`

func (q *Queries) DeleteCarModel(ctx context.Context, carModelID int32) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteCarModel, carModelID)
}

const getCarModel = `-- name: GetCarModel :one
SELECT car_model_id, car_brand_id, name, year_from, year_to
FROM car_model
WHERE car_model_id = ?
`

func (q *Queries) GetCarModel(ctx context.Context, carModelID int32) (CarModel, error) {
	row := q.db.QueryRowContext(ctx, getCarModel, carModelID)
	var i CarModel
	err := row.Scan(
		&i.CarModelID,
		&i.CarBrandID,
		&i.Name,
		&i.YearFrom,
		&i.YearTo,
	)
	return i, err
}

const listCarModelsByBrand = `-- name: ListCarModelsByBrand :many
SELECT car_model_id, car_brand_id, name, year_from, year_to
FROM car_model
WHERE car_brand_id = ?
ORDER BY name, year_from
`

func (q *Queries) ListCarModelsByBrand(ctx context.Context, carBrandID int32) ([]CarModel, error) {
	rows, err := q.db.QueryContext(ctx, listCarModelsByBrand, carBrandID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CarModel
	for rows.Next() {
		var i CarModel
		if err := rows.Scan(
			&i.CarModelID,
			&i.CarBrandID,
			&i.Name,
			&i.YearFrom,
			&i.YearTo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCarModel = `-- name: UpdateCarModel :execresult
UPDATE car_model SET
    car_brand_id = ?,
    name = ?,
    year_from = ?,
    year_to = ?
WHERE car_model_id = ?
`

type UpdateCarModelParams struct {
	CarBrandID int32
	Name       string
	YearFrom   sql.NullInt16
	YearTo     sql.NullInt16
	CarModelID int32
}

func (q *Queries) UpdateCarModel(ctx context.Context, arg UpdateCarModelParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateCarModel,
		arg.CarBrandID,
		arg.Name,
		arg.YearFrom,
		arg.YearTo,
		arg.CarModelID,
	)
}
