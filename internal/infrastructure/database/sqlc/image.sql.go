// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: image.sql

package db

import (
	"context"
	"database/sql"
)

const addImage = `-- name: AddImage :execresult
INSERT INTO image (reference_id, reference_type, image_url, is_primary, sort_image, created_at, created_by)
VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP, ?)
`

type AddImageParams struct {
	ReferenceID   int32
	ReferenceType string
	ImageUrl      string
	IsPrimary     bool
	SortImage     sql.NullInt32
	CreatedBy     sql.NullString
}

func (q *Queries) AddImage(ctx context.Context, arg AddImageParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addImage,
		arg.ReferenceID,
		arg.ReferenceType,
		arg.ImageUrl,
		arg.IsPrimary,
		arg.SortImage,
		arg.CreatedBy,
	)
}

const deleteImage = `-- name: DeleteImage :execresult
DELETE FROM image WHERE image_id = ?
`

func (q *Queries) DeleteImage(ctx context.Context, imageID int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteImage, imageID)
}

const getPrimaryImageByReference = `-- name: GetPrimaryImageByReference :one
SELECT image_id, reference_id, reference_type, image_url, is_primary, sort_image, created_at, created_by, updated_at, updated_by
FROM image
WHERE reference_type = ? AND reference_id = ? AND is_primary = 1
LIMIT 1
`

type GetPrimaryImageByReferenceParams struct {
	ReferenceType string
	ReferenceID   int32
}

func (q *Queries) GetPrimaryImageByReference(ctx context.Context, arg GetPrimaryImageByReferenceParams) (Image, error) {
	row := q.db.QueryRowContext(ctx, getPrimaryImageByReference, arg.ReferenceType, arg.ReferenceID)
	var i Image
	err := row.Scan(
		&i.ImageID,
		&i.ReferenceID,
		&i.ReferenceType,
		&i.ImageUrl,
		&i.IsPrimary,
		&i.SortImage,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const listImagesByReference = `-- name: ListImagesByReference :many
SELECT image_id, reference_id, reference_type, image_url, is_primary, sort_image, created_at, created_by, updated_at, updated_by
FROM image
WHERE reference_type = ? AND reference_id = ?
ORDER BY is_primary DESC, sort_image ASC, created_at ASC
`

type ListImagesByReferenceParams struct {
	ReferenceType string
	ReferenceID   int32
}

func (q *Queries) ListImagesByReference(ctx context.Context, arg ListImagesByReferenceParams) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, listImagesByReference, arg.ReferenceType, arg.ReferenceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ImageID,
			&i.ReferenceID,
			&i.ReferenceType,
			&i.ImageUrl,
			&i.IsPrimary,
			&i.SortImage,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setPrimaryImage = `-- name: SetPrimaryImage :execresult
UPDATE image
SET is_primary = CASE WHEN image_id = ? THEN 1 ELSE 0 END
WHERE reference_type = ? AND reference_id = ?
`

type SetPrimaryImageParams struct {
	ImageID       int64
	ReferenceType string
	ReferenceID   int32
}

// ตั้งรูปใดรูปหนึ่งเป็น primary ของ reference
func (q *Queries) SetPrimaryImage(ctx context.Context, arg SetPrimaryImageParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, setPrimaryImage, arg.ImageID, arg.ReferenceType, arg.ReferenceID)
}

const updateImage = `-- name: UpdateImage :execresult
UPDATE image
SET image_url = ?,
    is_primary = ?,
    sort_image = ?,
    updated_at = CURRENT_TIMESTAMP,
    updated_by = ?
WHERE image_id = ?
`

type UpdateImageParams struct {
	ImageUrl  string
	IsPrimary bool
	SortImage sql.NullInt32
	UpdatedBy sql.NullString
	ImageID   int64
}

func (q *Queries) UpdateImage(ctx context.Context, arg UpdateImageParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateImage,
		arg.ImageUrl,
		arg.IsPrimary,
		arg.SortImage,
		arg.UpdatedBy,
		arg.ImageID,
	)
}
