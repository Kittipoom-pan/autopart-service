// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: order.sql

package db

import (
	"context"
	"database/sql"
)

const createOrder = `-- name: CreateOrder :execresult
INSERT INTO ` + "`" + `order` + "`" + ` (customer_id, customer_payment_method_id, cart_id, amount, address_id, discount_id, status, created_at, created_by, updated_at, updated_by)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateOrderParams struct {
	CustomerID              int32
	CustomerPaymentMethodID sql.NullInt32
	CartID                  sql.NullInt32
	Amount                  sql.NullInt32
	AddressID               sql.NullInt32
	DiscountID              sql.NullInt32
	Status                  NullOrderStatus
	CreatedAt               sql.NullTime
	CreatedBy               sql.NullString
	UpdatedAt               sql.NullTime
	UpdatedBy               sql.NullString
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createOrder,
		arg.CustomerID,
		arg.CustomerPaymentMethodID,
		arg.CartID,
		arg.Amount,
		arg.AddressID,
		arg.DiscountID,
		arg.Status,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT order_id, customer_id, customer_payment_method_id, cart_id, amount, address_id, discount_id, status, created_at, created_by, updated_at, updated_by FROM ` + "`" + `order` + "`" + ` WHERE order_id = ?
`

func (q *Queries) GetOrderByID(ctx context.Context, orderID int32) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderByID, orderID)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.CustomerID,
		&i.CustomerPaymentMethodID,
		&i.CartID,
		&i.Amount,
		&i.AddressID,
		&i.DiscountID,
		&i.Status,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT order_id, customer_id, customer_payment_method_id, cart_id, amount, address_id, discount_id, status, created_at, created_by, updated_at, updated_by FROM ` + "`" + `order` + "`" + ` ORDER BY created_at DESC
`

func (q *Queries) ListOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.OrderID,
			&i.CustomerID,
			&i.CustomerPaymentMethodID,
			&i.CartID,
			&i.Amount,
			&i.AddressID,
			&i.DiscountID,
			&i.Status,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
