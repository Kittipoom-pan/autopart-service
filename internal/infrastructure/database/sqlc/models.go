// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type AdminUserRole string

const (
	AdminUserRoleSuperAdmin AdminUserRole = "super_admin"
	AdminUserRoleStaff      AdminUserRole = "staff"
)

func (e *AdminUserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AdminUserRole(s)
	case string:
		*e = AdminUserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for AdminUserRole: %T", src)
	}
	return nil
}

type NullAdminUserRole struct {
	AdminUserRole AdminUserRole
	Valid         bool // Valid is true if AdminUserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAdminUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.AdminUserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AdminUserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAdminUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AdminUserRole), nil
}

type CustomerPaymentMethodPaymentMethodType string

const (
	CustomerPaymentMethodPaymentMethodTypeCreditCard  CustomerPaymentMethodPaymentMethodType = "credit_card"
	CustomerPaymentMethodPaymentMethodTypeBankAccount CustomerPaymentMethodPaymentMethodType = "bank_account"
	CustomerPaymentMethodPaymentMethodTypePaypal      CustomerPaymentMethodPaymentMethodType = "paypal"
)

func (e *CustomerPaymentMethodPaymentMethodType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CustomerPaymentMethodPaymentMethodType(s)
	case string:
		*e = CustomerPaymentMethodPaymentMethodType(s)
	default:
		return fmt.Errorf("unsupported scan type for CustomerPaymentMethodPaymentMethodType: %T", src)
	}
	return nil
}

type NullCustomerPaymentMethodPaymentMethodType struct {
	CustomerPaymentMethodPaymentMethodType CustomerPaymentMethodPaymentMethodType
	Valid                                  bool // Valid is true if CustomerPaymentMethodPaymentMethodType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCustomerPaymentMethodPaymentMethodType) Scan(value interface{}) error {
	if value == nil {
		ns.CustomerPaymentMethodPaymentMethodType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CustomerPaymentMethodPaymentMethodType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCustomerPaymentMethodPaymentMethodType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CustomerPaymentMethodPaymentMethodType), nil
}

type DiscountDiscountType string

const (
	DiscountDiscountTypePercentage DiscountDiscountType = "percentage"
	DiscountDiscountTypeFixed      DiscountDiscountType = "fixed"
)

func (e *DiscountDiscountType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DiscountDiscountType(s)
	case string:
		*e = DiscountDiscountType(s)
	default:
		return fmt.Errorf("unsupported scan type for DiscountDiscountType: %T", src)
	}
	return nil
}

type NullDiscountDiscountType struct {
	DiscountDiscountType DiscountDiscountType
	Valid                bool // Valid is true if DiscountDiscountType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDiscountDiscountType) Scan(value interface{}) error {
	if value == nil {
		ns.DiscountDiscountType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DiscountDiscountType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDiscountDiscountType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DiscountDiscountType), nil
}

type OrderStatus string

const (
	OrderStatusPending   OrderStatus = "pending"
	OrderStatusCompleted OrderStatus = "completed"
	OrderStatusCancelled OrderStatus = "cancelled"
)

func (e *OrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatus(s)
	case string:
		*e = OrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatus: %T", src)
	}
	return nil
}

type NullOrderStatus struct {
	OrderStatus OrderStatus
	Valid       bool // Valid is true if OrderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatus), nil
}

type PaymentPaymentMethod string

const (
	PaymentPaymentMethodCreditCard   PaymentPaymentMethod = "credit_card"
	PaymentPaymentMethodBankTransfer PaymentPaymentMethod = "bank_transfer"
	PaymentPaymentMethodPaypal       PaymentPaymentMethod = "paypal"
	PaymentPaymentMethodCod          PaymentPaymentMethod = "cod"
)

func (e *PaymentPaymentMethod) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentPaymentMethod(s)
	case string:
		*e = PaymentPaymentMethod(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentPaymentMethod: %T", src)
	}
	return nil
}

type NullPaymentPaymentMethod struct {
	PaymentPaymentMethod PaymentPaymentMethod
	Valid                bool // Valid is true if PaymentPaymentMethod is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentPaymentMethod) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentPaymentMethod, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentPaymentMethod.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentPaymentMethod) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentPaymentMethod), nil
}

type PaymentStatus string

const (
	PaymentStatusPending   PaymentStatus = "pending"
	PaymentStatusCompleted PaymentStatus = "completed"
	PaymentStatusFailed    PaymentStatus = "failed"
)

func (e *PaymentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentStatus(s)
	case string:
		*e = PaymentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentStatus: %T", src)
	}
	return nil
}

type NullPaymentStatus struct {
	PaymentStatus PaymentStatus
	Valid         bool // Valid is true if PaymentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentStatus), nil
}

type StockMovementEventType string

const (
	StockMovementEventTypeIn  StockMovementEventType = "in"
	StockMovementEventTypeOut StockMovementEventType = "out"
)

func (e *StockMovementEventType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = StockMovementEventType(s)
	case string:
		*e = StockMovementEventType(s)
	default:
		return fmt.Errorf("unsupported scan type for StockMovementEventType: %T", src)
	}
	return nil
}

type NullStockMovementEventType struct {
	StockMovementEventType StockMovementEventType
	Valid                  bool // Valid is true if StockMovementEventType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStockMovementEventType) Scan(value interface{}) error {
	if value == nil {
		ns.StockMovementEventType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.StockMovementEventType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStockMovementEventType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.StockMovementEventType), nil
}

type Address struct {
	AddressID    int32
	CustomerID   int32
	Title        sql.NullString
	AddressLine1 sql.NullString
	AddressLine2 sql.NullString
	Country      sql.NullString
	City         sql.NullString
	PostalCode   sql.NullString
	PhoneNumber  sql.NullString
	IsDefault    interface{}
	CreatedAt    sql.NullTime
	CreatedBy    sql.NullString
	UpdatedAt    sql.NullTime
	UpdatedBy    sql.NullString
}

type AdminUser struct {
	AdminUserID int32
	Username    string
	Email       string
	Password    string
	Role        AdminUserRole
	CreatedAt   sql.NullTime
	CreatedBy   sql.NullString
	UpdatedAt   sql.NullTime
	UpdatedBy   sql.NullString
	IsActive    bool
}

type CarBrand struct {
	CarBrandID  int32
	Name        string
	Description sql.NullString
}

type Cart struct {
	CartID     int32
	CustomerID int32
	Amount     sql.NullInt32
	IsCheckout interface{}
	CreatedAt  sql.NullTime
	UpdatedAt  sql.NullTime
}

type CartItem struct {
	CartItemID int32
	CartID     int32
	PartID     int32
	Quantity   sql.NullInt32
	CreatedAt  sql.NullTime
	UpdatedAt  sql.NullTime
}

type Customer struct {
	CustomerID  int32
	FirstName   sql.NullString
	LastName    sql.NullString
	Username    string
	Email       string
	Password    sql.NullString
	BirthDate   sql.NullTime
	PhoneNumber sql.NullString
	CreatedAt   sql.NullTime
	CreatedBy   sql.NullString
	UpdatedAt   sql.NullTime
	UpdatedBy   sql.NullString
	IsActive    bool
}

type CustomerPaymentMethod struct {
	CustomerPaymentMethodID int32
	CustomerID              int32
	AccountName             sql.NullString
	PaymentMethodType       CustomerPaymentMethodPaymentMethodType
	CardToken               sql.NullString
	IsDefault               sql.NullBool
	CreatedAt               sql.NullTime
	CreatedBy               sql.NullString
	UpdatedAt               sql.NullTime
	UpdatedBy               sql.NullString
}

type Discount struct {
	DiscountID     int32
	Code           string
	DiscountType   NullDiscountDiscountType
	Amount         sql.NullInt32
	Description    sql.NullString
	MinOrder       sql.NullInt32
	ExpirationDate sql.NullTime
	CreatedAt      sql.NullTime
	CreatedBy      sql.NullString
	UpdatedAt      sql.NullTime
	UpdatedBy      sql.NullString
}

type Order struct {
	OrderID                 int32
	CustomerID              int32
	CustomerPaymentMethodID sql.NullInt32
	CartID                  sql.NullInt32
	Amount                  sql.NullInt32
	AddressID               sql.NullInt32
	DiscountID              sql.NullInt32
	Status                  NullOrderStatus
	CreatedAt               sql.NullTime
	CreatedBy               sql.NullString
	UpdatedAt               sql.NullTime
	UpdatedBy               sql.NullString
}

type OrderItem struct {
	OrderItemID int32
	OrderID     int32
	PartID      sql.NullInt32
	Quantity    sql.NullInt32
	Price       sql.NullInt32
}

type Part struct {
	PartID      int32
	CarBrandID  int32
	PartBrandID int32
	PartTypeID  int32
	Name        string
	Description sql.NullString
	Price       sql.NullInt32
	Quantity    sql.NullInt32
	IsActive    bool
	CreatedAt   sql.NullTime
	CreatedBy   sql.NullString
	UpdatedAt   sql.NullTime
	UpdatedBy   sql.NullString
}

type PartBrand struct {
	PartBrandID int32
	Name        string
	Description sql.NullString
}

type PartType struct {
	PartTypeID  int32
	Name        string
	Description sql.NullString
}

type Payment struct {
	PaymentID     int32
	OrderID       int32
	Amount        sql.NullInt32
	PaymentMethod NullPaymentPaymentMethod
	Status        NullPaymentStatus
	CreatedAt     sql.NullTime
	CreatedBy     sql.NullString
	UpdatedAt     sql.NullTime
	UpdatedBy     sql.NullString
}

type StockMovement struct {
	StockMovementID int32
	PartID          int32
	PartBrandID     sql.NullInt32
	QuantityChange  sql.NullInt32
	Price           sql.NullInt32
	EventType       NullStockMovementEventType
	Remark          sql.NullString
	CreatedAt       sql.NullTime
	CreatedBy       sql.NullString
}

type Token struct {
	ID         int32
	CustomerID int32
	Token      string
	ExpiresAt  sql.NullTime
	CreatedAt  sql.NullTime
}
