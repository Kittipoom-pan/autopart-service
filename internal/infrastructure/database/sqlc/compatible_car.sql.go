// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: compatible_car.sql

package db

import (
	"context"
	"database/sql"
)

const createCompatibleCar = `-- name: CreateCompatibleCar :execresult
INSERT INTO compatible_car (part_id, car_model_id, year_from, year_to)
VALUES (?, ?, ?, ?)
`

type CreateCompatibleCarParams struct {
	PartID     int32
	CarModelID int32
	YearFrom   sql.NullInt16
	YearTo     sql.NullInt16
}

func (q *Queries) CreateCompatibleCar(ctx context.Context, arg CreateCompatibleCarParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createCompatibleCar,
		arg.PartID,
		arg.CarModelID,
		arg.YearFrom,
		arg.YearTo,
	)
}

const deleteCompatibleCar = `-- name: DeleteCompatibleCar :execresult
DELETE FROM compatible_car WHERE compatible_id = ?
`

func (q *Queries) DeleteCompatibleCar(ctx context.Context, compatibleID int32) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteCompatibleCar, compatibleID)
}

const getCompatibleCar = `-- name: GetCompatibleCar :one
SELECT compatible_id, part_id, car_model_id, year_from, year_to
FROM compatible_car
WHERE compatible_id = ?
`

func (q *Queries) GetCompatibleCar(ctx context.Context, compatibleID int32) (CompatibleCar, error) {
	row := q.db.QueryRowContext(ctx, getCompatibleCar, compatibleID)
	var i CompatibleCar
	err := row.Scan(
		&i.CompatibleID,
		&i.PartID,
		&i.CarModelID,
		&i.YearFrom,
		&i.YearTo,
	)
	return i, err
}

const listCompatibleCarsByPart = `-- name: ListCompatibleCarsByPart :many
SELECT cc.compatible_id, cc.part_id, cc.car_model_id,
       cm.name AS car_model_name, cm.year_from AS model_year_from, cm.year_to AS model_year_to,
       cb.name AS car_brand_name,
       cc.year_from AS override_year_from, cc.year_to AS override_year_to
FROM compatible_car cc
JOIN car_model cm ON cc.car_model_id = cm.car_model_id
JOIN car_brand cb ON cm.car_brand_id = cb.car_brand_id
WHERE cc.part_id = ?
ORDER BY cb.name, cm.name, cm.year_from
`

type ListCompatibleCarsByPartRow struct {
	CompatibleID     int32
	PartID           int32
	CarModelID       int32
	CarModelName     string
	ModelYearFrom    sql.NullInt16
	ModelYearTo      sql.NullInt16
	CarBrandName     string
	OverrideYearFrom sql.NullInt16
	OverrideYearTo   sql.NullInt16
}

func (q *Queries) ListCompatibleCarsByPart(ctx context.Context, partID int32) ([]ListCompatibleCarsByPartRow, error) {
	rows, err := q.db.QueryContext(ctx, listCompatibleCarsByPart, partID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCompatibleCarsByPartRow
	for rows.Next() {
		var i ListCompatibleCarsByPartRow
		if err := rows.Scan(
			&i.CompatibleID,
			&i.PartID,
			&i.CarModelID,
			&i.CarModelName,
			&i.ModelYearFrom,
			&i.ModelYearTo,
			&i.CarBrandName,
			&i.OverrideYearFrom,
			&i.OverrideYearTo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
