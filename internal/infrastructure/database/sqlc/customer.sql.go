// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: customer.sql

package db

import (
	"context"
	"database/sql"
)

const createCustomer = `-- name: CreateCustomer :execresult
INSERT INTO customer (first_name, last_name, username, email, password, birth_date, phone_number, created_at, created_by, updated_at, updated_by)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateCustomerParams struct {
	FirstName   sql.NullString
	LastName    sql.NullString
	Username    string
	Email       string
	Password    sql.NullString
	BirthDate   sql.NullTime
	PhoneNumber sql.NullString
	CreatedAt   sql.NullTime
	CreatedBy   sql.NullString
	UpdatedAt   sql.NullTime
	UpdatedBy   sql.NullString
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createCustomer,
		arg.FirstName,
		arg.LastName,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.BirthDate,
		arg.PhoneNumber,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
}

const getCustomer = `-- name: GetCustomer :one
SELECT customer_id, first_name, last_name, username, email, password, birth_date, phone_number, created_at, created_by, updated_at, updated_by FROM customer WHERE customer_id = ?
`

func (q *Queries) GetCustomer(ctx context.Context, customerID int32) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomer, customerID)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.BirthDate,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const listCustomers = `-- name: ListCustomers :many
SELECT customer_id, first_name, last_name, username, email, password, birth_date, phone_number, created_at, created_by, updated_at, updated_by FROM customer ORDER BY last_name
`

func (q *Queries) ListCustomers(ctx context.Context) ([]Customer, error) {
	rows, err := q.db.QueryContext(ctx, listCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customer
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.CustomerID,
			&i.FirstName,
			&i.LastName,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.BirthDate,
			&i.PhoneNumber,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
