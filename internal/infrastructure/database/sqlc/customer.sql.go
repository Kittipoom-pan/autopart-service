// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: customer.sql

package db

import (
	"context"
	"database/sql"
)

const createCustomer = `-- name: CreateCustomer :execresult
INSERT INTO customer (first_name, last_name, username, email, password, birth_date, phone_number, created_at, created_by)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateCustomerParams struct {
	FirstName   sql.NullString
	LastName    sql.NullString
	Username    string
	Email       string
	Password    sql.NullString
	BirthDate   sql.NullTime
	PhoneNumber sql.NullString
	CreatedAt   sql.NullTime
	CreatedBy   sql.NullString
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createCustomer,
		arg.FirstName,
		arg.LastName,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.BirthDate,
		arg.PhoneNumber,
		arg.CreatedAt,
		arg.CreatedBy,
	)
}

const getCustomer = `-- name: GetCustomer :one
SELECT customer_id, first_name, last_name, username, email, password, birth_date, phone_number, is_active FROM customer WHERE customer_id = ? and is_active = 1
`

type GetCustomerRow struct {
	CustomerID  int32
	FirstName   sql.NullString
	LastName    sql.NullString
	Username    string
	Email       string
	Password    sql.NullString
	BirthDate   sql.NullTime
	PhoneNumber sql.NullString
	IsActive    bool
}

func (q *Queries) GetCustomer(ctx context.Context, customerID int32) (GetCustomerRow, error) {
	row := q.db.QueryRowContext(ctx, getCustomer, customerID)
	var i GetCustomerRow
	err := row.Scan(
		&i.CustomerID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.BirthDate,
		&i.PhoneNumber,
		&i.IsActive,
	)
	return i, err
}

const listCustomers = `-- name: ListCustomers :many
SELECT customer_id, first_name, last_name, username, email, password, birth_date, phone_number, is_active FROM customer WHERE is_active = 1 ORDER BY created_at
`

type ListCustomersRow struct {
	CustomerID  int32
	FirstName   sql.NullString
	LastName    sql.NullString
	Username    string
	Email       string
	Password    sql.NullString
	BirthDate   sql.NullTime
	PhoneNumber sql.NullString
	IsActive    bool
}

func (q *Queries) ListCustomers(ctx context.Context) ([]ListCustomersRow, error) {
	rows, err := q.db.QueryContext(ctx, listCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCustomersRow
	for rows.Next() {
		var i ListCustomersRow
		if err := rows.Scan(
			&i.CustomerID,
			&i.FirstName,
			&i.LastName,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.BirthDate,
			&i.PhoneNumber,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomer = `-- name: UpdateCustomer :execresult
UPDATE customer SET
    first_name = ?,
    last_name = ?,
    username = ?,
    email = ?,
    birth_date = ?,
    phone_number = ?,
    updated_at = ?,
    updated_by = ?
WHERE customer_id = ? and is_active = 1
`

type UpdateCustomerParams struct {
	FirstName   sql.NullString
	LastName    sql.NullString
	Username    string
	Email       string
	BirthDate   sql.NullTime
	PhoneNumber sql.NullString
	UpdatedAt   sql.NullTime
	UpdatedBy   sql.NullString
	CustomerID  int32
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateCustomer,
		arg.FirstName,
		arg.LastName,
		arg.Username,
		arg.Email,
		arg.BirthDate,
		arg.PhoneNumber,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.CustomerID,
	)
}

const updateCustomerIsActive = `-- name: UpdateCustomerIsActive :execresult
UPDATE customer SET
    is_active = ?,
    updated_at = ?,
    updated_by = ?
WHERE customer_id = ?
`

type UpdateCustomerIsActiveParams struct {
	IsActive   bool
	UpdatedAt  sql.NullTime
	UpdatedBy  sql.NullString
	CustomerID int32
}

func (q *Queries) UpdateCustomerIsActive(ctx context.Context, arg UpdateCustomerIsActiveParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateCustomerIsActive,
		arg.IsActive,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.CustomerID,
	)
}

const updateCustomerPassword = `-- name: UpdateCustomerPassword :execresult
UPDATE customer SET
    password = ?,
    updated_at = ?,
    updated_by = ?
WHERE customer_id = ? and is_active = 1
`

type UpdateCustomerPasswordParams struct {
	Password   sql.NullString
	UpdatedAt  sql.NullTime
	UpdatedBy  sql.NullString
	CustomerID int32
}

func (q *Queries) UpdateCustomerPassword(ctx context.Context, arg UpdateCustomerPasswordParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateCustomerPassword,
		arg.Password,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.CustomerID,
	)
}
