// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: part.sql

package db

import (
	"context"
)

const getPart = `-- name: GetPart :one
SELECT part_id, car_brand_id, part_brand_id, part_type_id, name, description, price, quantity, is_active, created_at, created_by, updated_at, updated_by FROM part WHERE part_id = ?
`

func (q *Queries) GetPart(ctx context.Context, partID int32) (Part, error) {
	row := q.db.QueryRowContext(ctx, getPart, partID)
	var i Part
	err := row.Scan(
		&i.PartID,
		&i.CarBrandID,
		&i.PartBrandID,
		&i.PartTypeID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Quantity,
		&i.IsActive,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const listParts = `-- name: ListParts :many
SELECT part_id, car_brand_id, part_brand_id, part_type_id, name, description, price, quantity, is_active, created_at, created_by, updated_at, updated_by FROM part ORDER BY name
`

func (q *Queries) ListParts(ctx context.Context) ([]Part, error) {
	rows, err := q.db.QueryContext(ctx, listParts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Part
	for rows.Next() {
		var i Part
		if err := rows.Scan(
			&i.PartID,
			&i.CarBrandID,
			&i.PartBrandID,
			&i.PartTypeID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Quantity,
			&i.IsActive,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
